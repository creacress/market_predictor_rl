


import pandas as pd
import torch
import joblib
import logging
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from trainers.env_safran_rl import SafranTradingEnv
from trainers.lstm_trainer import LSTMModel, SEQ_LEN

logging.basicConfig(
    filename='main.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# 1. Charger les donn√©es
df = pd.read_parquet("data/SAF_PA_clean.parquet")
print("‚úÖ Donn√©es charg√©es.")
logging.info("Donn√©es charg√©es depuis data/SAF_PA_clean.parquet")

# 2. Initialiser l'environnement avec LSTM int√©gr√©
env = DummyVecEnv([lambda: SafranTradingEnv(df)])
print("üîó Environnement PPO + LSTM pr√™t.")
logging.info("Environnement PPO + LSTM initialis√©.")

# 3. Initialiser le mod√®le PPO
model = PPO("MlpPolicy", env, verbose=1)
print("üß† PPO initialis√©.")
logging.info("Mod√®le PPO initialis√©.")

# 4. Entra√Ænement
print("üöÄ Entra√Ænement du mod√®le...")
logging.info("D√©but de l'entra√Ænement PPO.")
model.learn(total_timesteps=100_000)
print("‚úÖ Entra√Ænement termin√©.")
logging.info("Entra√Ænement PPO termin√©.")

# 5. Sauvegarde
model.save("models/ppo_safran_trader")
print("üíæ Mod√®le sauvegard√©.")
logging.info("Mod√®le PPO sauvegard√© dans models/ppo_safran_trader.")

# 6. Pr√©diction LSTM du dernier jour pour affichage
scaler = joblib.load("models/lstm_scaler.save")
df_for_lstm = df[['close', 'ma_5', 'ma_20', 'return_1d', 'rsi']].dropna()
scaled = scaler.transform(df_for_lstm.values)
input_seq = torch.FloatTensor(scaled[-SEQ_LEN:]).unsqueeze(0)

lstm_model = LSTMModel(input_size=input_seq.shape[2])
lstm_model.load_state_dict(torch.load("models/lstm_safran.pth", map_location="cpu"))
lstm_model.eval()

with torch.no_grad():
    pred_scaled = lstm_model(input_seq).item()

close_min, close_max = scaler.data_min_[0], scaler.data_max_[0]
predicted_price = pred_scaled * (close_max - close_min) + close_min

print(f"üìà Pr√©diction LSTM (prochaine cl√¥ture estim√©e) : {predicted_price:.2f} ‚Ç¨")
logging.info(f"Pr√©diction LSTM du prochain close : {predicted_price:.2f} ‚Ç¨")